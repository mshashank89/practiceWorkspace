package com.shash.threads.locks;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class MultiLockDemo {

	private static class Worker{
		
		Random random = new Random();
		private List<Integer> list1 = new ArrayList<Integer>();
		private List<Integer> list2 = new ArrayList<Integer>();
		
		private synchronized void stageOne(){
			try {
				Thread.sleep(1);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
			list1.add(random.nextInt(100));
		}
		
		private void stageTwo(){
			try {
				Thread.sleep(1);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			
			list2.add(random.nextInt(100));
		}
		
		public void process(){
			stageOne();
			stageTwo();
		}
		
		

		public void main() {
			
			Thread t1 = new Thread(new Runnable(){
				public void run(){
					for(int i=0;i<1000;i++){
						process();
					}
				}
			});
			
			Thread t2 = new Thread(new Runnable(){
				public void run(){
					for(int i=0;i<1000;i++){
						process();
					}
				}
			});
			
			
			
			System.out.println("Starting ...");
			long start = System.currentTimeMillis();
			
			t1.start();
			t2.start();
			
			try {
				t1.join();
				t2.join();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			long end = System.currentTimeMillis();
			
			System.out.println("Time taken: " + (end - start));
			System.out.println("List1 : " + list1.size() + " ; List2: " + list2.size());
		}
	}
	
	public static void main(String[] args) {
		new Worker().main();
	}
	

}
