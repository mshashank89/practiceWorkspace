package ds.graph;

import java.util.Iterator;
import java.util.LinkedList;

import ds.graph.path.PrintAllPaths.Graph;


public class BFS {

	private static class Graph{
		LinkedList<Integer> arr[];
		int v;
		
		public Graph(int v){
			this.v = v;
			arr = new LinkedList[v];
			for(int i=0;i<v;i++){
				arr[i] = new LinkedList<Integer>();
			}
		}
		
		public void add(int src, int dest){
			arr[src].add(dest);
			arr[dest].add(src);
		}
		
		
		public void BFS(int s){
			boolean visited[] = new boolean[v];
			visited[s] = true;
			LinkedList<Integer> queue = new LinkedList<Integer>();
			queue.push(s);
			while(queue.size() != 0){
				s = queue.poll();
				System.out.print(s + "  ");
				Iterator<Integer> it = arr[s].listIterator();
				while(it.hasNext()){
					int n = it.next();
					if (!visited[n]){
						visited[n] = true;
						queue.add(n);
					}
				}
			}
		}
	}
	public static void main(String[] args) {
		
		/*
		 *           +------------------+
					 ^                  |
					 |        			|
					 |         			|
			0------->1-------->2		|			 
					 |         |		|			
					 |         |        |
					 |         |        |
					 V		   V        |
			5<-------4<--------3<-------+


		 */
		
		Graph g = new Graph(6);
		g.add(0, 1);
//		g.add(0, 5);
		g.add(1, 2);
		g.add(1, 3);
		g.add(2, 3);
		g.add(3, 4);
		g.add(4, 5);
		g.add(1, 4);
		
		g.BFS(0);
		g.BFS(1);
		g.BFS(2);
		g.BFS(3);
		g.BFS(4);
		g.BFS(5);
		

	}

}
