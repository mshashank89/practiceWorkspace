/* IMPORTANT: Multiple classes and nested static classes are supported */


import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;

//import for Scanner and other utility  classes
import java.util.*;


class TestClass {
	
	private static Print p = new Print();
	
    public static void main(String args[] ) throws Exception {
        /*
         * Read input from stdin and provide input before running
         * Use either of these methods for input

        //BufferedReader
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String line = br.readLine();
        int N = Integer.parseInt(line);*/

        //Scanner
        Scanner s = new Scanner(System.in);
        int t = s.nextInt();
		int rootVal = s.nextInt();
		s.nextLine();
		int noOfInputs = 2*(t-1);
		Node root = new Node(rootVal);
		Node curNode = root;
        for (int i = 0; i < noOfInputs; i++) {
			String input = s.nextLine();
			
			
			if (input.matches("[0-9]+")){
				int data = Integer.parseInt(input);
				curNode.setData(data);
				curNode = root;
			}
			else{
				char[] inputCharArray = input.toCharArray();
				for (int j=0;j<inputCharArray.length;j++){
					if (inputCharArray[j] == 'L'){
						if (curNode.getLeft() == null){
							curNode.addLeft();
						}
						curNode = curNode.getLeft();
					}
					else if (inputCharArray[j] == 'R'){
						if (curNode.getRight() == null){
							curNode.addRight();
						}
						curNode = curNode.getRight();
					}					
				}
				
			}
			
        }
		
		p.println(Node.getHeight(root, 0, 0, 0));
        
        
        p.close();
    }
	
	public static class Node{
		private int data;
		private Node left = null;
		private Node right = null;
		
		public Node(){
			
		}
		
		public Node(int data){
			this.data = data;
		}
		public void setData(int data){
			this.data = data;
		}
		public void addLeft(int data){
			Node left = new Node(data);
			this.left = left;
		}
		
		public void addRight(int data){
			Node right = new Node(data);
			this.right = right;
		}
		
		public void addLeft(){
			Node left = new Node();
			this.left = left;
		}
		
		public void addRight(){
			Node right = new Node();
			this.right = right;
		}
		
		public Node getLeft(){
			return left;
		}
		public Node getRight(){
			return right;
		}
		
		
		
		public static int getHeight(Node node, int height, int leftHeight, int rightHeight){
			height = (leftHeight >= rightHeight)? leftHeight : rightHeight;
			if (node == null){
				height = (leftHeight >= rightHeight)? leftHeight : rightHeight;
				return height;
			}
			if (node.getLeft() != null){
				leftHeight = getHeight(node.getLeft(), height, ++leftHeight, rightHeight);
			}
			if (node.getRight() != null){
				rightHeight = getHeight(node.getRight(), height, leftHeight, ++rightHeight);
			}
			
			height = (leftHeight >= rightHeight)? leftHeight : rightHeight;
			return height;
			
		}
	}
    
    
    static class Print {
 
        private final BufferedWriter bw;
 
        public Print() {
            bw = new BufferedWriter(new OutputStreamWriter(System.out));
        }
 
        public void print(String str) throws IOException {
            bw.append(str);
        }
        
        public void print(int val) throws IOException {
            bw.append(String.valueOf(val));
        }
        
        public void println(int val) throws IOException {
            print(val);
            bw.append("\n");
        }
        public void println(String str) throws IOException {
            print(str);
            bw.append("\n");
        }
        
        public void println() throws IOException {
            bw.append("\n");
        }
 
        public void close() throws IOException {
            bw.close();
        }
    }
}
