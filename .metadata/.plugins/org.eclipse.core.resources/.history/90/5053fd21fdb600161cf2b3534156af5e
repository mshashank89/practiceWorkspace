/* IMPORTANT: Multiple classes and nested static classes are supported */

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;

//import for Scanner and other utility  classes
import java.util.*;

class TestClass {

	private static Print p = new Print();

	public static void main(String args[]) throws Exception {
		/*
		 * Read input from stdin and provide input before running Use either of
		 * these methods for input
		 * 
		 * //BufferedReader BufferedReader br = new BufferedReader(new
		 * InputStreamReader(System.in)); String line = br.readLine(); int N =
		 * Integer.parseInt(line);
		 */

		// Scanner
		Scanner s = new Scanner(System.in);
		int t = s.nextInt();

		for (int i = 0; i < t; i++) {
			int n = s.nextInt();
			int sumOfUniqueWeights = 0;
			int[] a = new int[n];
			for (int j = 0; j < n; j++) {
				a[j] = s.nextInt();
			}
			sumOfUniqueWeights = calculateWeightSum(a);
			p.println(sumOfUniqueWeights);
		}
		p.close();
	}

	private static int calculateWeightSum(int[] a) {
		int sum = 0;
		int arrayLength = a.length;

		int maxPossibleWeight = getMaxPossWeight(arrayLength);

		// find the number of nonUnique subsequences
		// Map<Integer, Integer> nonUniqueMap = findUniqueSubSeq(a);
		Map<Integer, Integer> uniqueMap = findUniqueSubSeq(a);

		sum = calculateUniqueWeightSum(uniqueMap);
		return sum;
	}

	private static int calculateUniqueWeightSum(Map<Integer, Integer> uniqueMap) {
		int sum = 0;
		for (int key : uniqueMap.keySet()) {
			int subSeqLen = key;
			int subSeqCount = uniqueMap.get(key);
			int uniQueWeightForSubSeq = key * (getMaxPossWeight(key));

			sum += uniQueWeightForSubSeq;
		}

		return sum;
	}

	private static Map<Integer, Integer> findUniqueSubSeq(int[] a) {
		Map<Integer, Integer> nonUniqueMap = new HashMap<Integer, Integer>();
		Map<Integer, Integer> uniqueMap = new HashMap<Integer, Integer>();

		int subSeqLen = 1;
		int prev = 0;
		int continuousFlag = 0;
		boolean firstIter = false;

		for (int i = 0; i < a.length; i++) {
			continuousFlag = i;
			prev = -1;
			firstIter = true;
			for (int j = i; j < a.length; j++) {
				if (firstIter){
					prev = a[j];
					firstIter = false;
					continue;
				}
				
				if (prev != a[j]) {
					subSeqLen++;
					continuousFlag++;
				}

				// if
				if (continuousFlag != j || j == a.length-1) {
					continuousFlag = j;
					// increment the count of nonUnique subsequence by 1
					int uniqueSubSeqCount = 0;
					if (null != uniqueMap.get(subSeqLen)) {
						uniqueSubSeqCount = uniqueMap.get(subSeqLen);
					}
					uniqueSubSeqCount++;
					uniqueMap.put(subSeqLen, uniqueSubSeqCount);

					subSeqLen = 0;
					i = j;
				}
				
				
				
			}
		}
		
		System.out.println("Unique Map:");
		for (int i: uniqueMap.keySet()){
			System.out.println(i + " : " + uniqueMap.get(i));
		}

		return uniqueMap;
	}

	private static int getMaxPossWeight(int arrayLength) {
		int maxPossibleWeight = 0;
		for (int i = 1; i < arrayLength + 1; i++) {
			maxPossibleWeight += i * (arrayLength + 1 - i);
		}

		return maxPossibleWeight;
	}

	static class Print {

		private final BufferedWriter bw;

		public Print() {
			bw = new BufferedWriter(new OutputStreamWriter(System.out));
		}

		public void print(String str) throws IOException {
			bw.append(str);
		}

		public void print(int val) throws IOException {
			bw.append(String.valueOf(val));
		}

		public void println(int val) throws IOException {
			print(val);
			bw.append("\n");
		}

		public void println(String str) throws IOException {
			print(str);
			bw.append("\n");
		}

		public void println() throws IOException {
			bw.append("\n");
		}

		public void close() throws IOException {
			bw.close();
		}
	}
}
